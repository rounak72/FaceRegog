{"version":3,"sources":["Components/Navigation/Navigation.js","Components/Logo/Logo.js","Components/Logo/brain.png","Components/ImageLinkForm/ImageLinkForm.js","Components/Rank/Rank.js","Components/Image/Image.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","style","display","justifyContent","className","Logo","options","max","height","width","src","alt","ImageLinkForm","OnInputChange","OnSumbit","type","onChange","onClick","Rank","Image","leftCol","topRow","rightCol","bottomRow","picture","console","log","id","top","right","left","bottom","app","Clarifai","App","apiKey","calculateFaceLocation","data","image","document","getElementById","Number","left_col","setState","top_row","right_col","bottom_row","displayBox","box","event","target","value","input","state","models","initModel","FACE_DETECT_MODEL","then","generalModel","predict","response","concepts","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7ef29c93.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Navigation = () => {\r\n\r\n    return (\r\n        <div style={{display: 'flex', justifyContent: 'flex-end'}}> \r\n            <p className='f3 link dim black underline pa3 pointer'>Sign Out</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React  from 'react'\r\nimport Tilt from 'react-tilt';\r\nimport './brain.png';\r\n\r\nconst Logo = () => {\r\n\r\n    return (\r\n        <div>\r\n            <Tilt className=\"Tilt br2 outline w-50 pa3 \" options={{ max: 25 }} style={{ height: 200, width: 200 }} >\r\n                <img src='https://static.vecteezy.com/system/resources/thumbnails/001/218/541/original/pink-human-brain-icon.jpg'alt='logo'/> \r\n            </Tilt>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logo;","export default __webpack_public_path__ + \"static/media/brain.331e5c37.png\";","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport '../../App.css'\r\nimport 'tachyons';\r\n\r\n\r\nconst ImageLinkForm = ({OnInputChange , OnSumbit}) => {\r\n\r\n    return (\r\n        <div>\r\n            <div className='centre'>\r\n                <Tilt className=\"Tilt\" options={{ max: 5 }} style={{ height: 200, width: 200 }} >\r\n                    <p className='tc'>\r\n                        {'Input an Image URL from the web'}\r\n                    </p>\r\n                    <div className='Tilt-inner tc'>\r\n                        <input className='f4 pa2 w-70' type='text' onChange={OnInputChange} />\r\n                        <button className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple tc' onClick={OnSumbit}>Go</button>\r\n                    </div>\r\n                </Tilt>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageLinkForm;","import React, { Component } from 'react'\r\n\r\nconst Rank = () => {\r\n\r\n    return (\r\n        <div>\r\n            <div className='black f3 centre'>\r\n                {'This is Just an illustration of Face Detection'}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rank;","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport '../../App.css';\r\nimport './image.css'\r\nimport 'tachyons';\r\n\r\n\r\nconst Image = ({ leftCol, topRow, rightCol, bottomRow, picture }) => {\r\n    console.log(leftCol, topRow, rightCol, bottomRow)\r\n    return (\r\n        <div className='centre ma'>\r\n            <Tilt className=\"Tilt\" options={{ max: 25 }} style={{ height: 200, width: 200 }} >\r\n                <div className='absolute mt2'>\r\n                    <img id='inputImage' src={picture} alt='pic' />\r\n                    <div className='bounding-box' style={{ top: topRow, right: rightCol, left: leftCol, bottom: bottomRow }}></div>\r\n                </div>\r\n            </Tilt>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Image;","import React, { Component } from 'react';\nimport Navigation from './Components/Navigation/Navigation';\nimport Logo from './Components/Logo/Logo';\nimport ImageLinkForm from './Components/ImageLinkForm/ImageLinkForm';\nimport Rank from './Components/Rank/Rank';\nimport Clarifai from 'clarifai';\nimport Image from './Components/Image/Image';\n\n\nconst app = new Clarifai.App({\n  apiKey: 'd6b62908d7f74bc6addaceb73d1ad1e4'\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      leftCol: '',\n      topRow : '',\n      rightCol : '',\n      bottomRow : ''\n      \n\n\n    }\n  }\n  calculateFaceLocation = (data) =>{\n        \n    const image = document.getElementById('inputImage');\n    const width = Number(image.width)\n    const height = Number(image.height)\n    console.log(width ,height )\n    console.log(data.left_col * width)\n    // return{\n        \n    //     leftCol : data.left_col * width,\n    //     topRow :  data.top_row * height, \n    //     rightCol : width - (data.right_col * width),\n    //     bottomRow : height- (data.bottom_row * height)\n    //   }\n\n    this.setState({leftCol : data.left_col * width})\n    this.setState({topRow :  data.top_row * height})\n    this.setState({rightCol : width - (data.right_col * width)})\n    this.setState({bottomRow : height- (data.bottom_row * height)})\n  }\n\n  displayBox = (data) =>{\n    console.log(this.box)\n    this.setState({box : data});\n    \n  }\n\n  OnInputChange = (event) => {\n    console.log(event.target.value);\n    this.setState({ input: event.target.value });\n  }\n\n  OnSumbit = () => {\n    console.log(this.state.input)\n\n    app.models.initModel({ id: Clarifai.FACE_DETECT_MODEL })\n      .then(generalModel => {\n        return generalModel.predict(this.state.input);\n      })\n      .then(response => {\n        var concepts = response['outputs'][0]['data']['regions'][0]['region_info']['bounding_box']\n        console.log(concepts)\n        // this.displayBox( this.calculateFaceLocation(concepts) )\n        this.calculateFaceLocation(concepts)\n      })\n\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <Navigation />\n        <Logo />\n        <Rank />\n        <ImageLinkForm  OnInputChange={this.OnInputChange} OnSumbit={this.OnSumbit} />\n        <Image picture={this.state.input} \n        leftCol={this.state.leftCol} \n        topRow={this.state.topRow} \n        rightCol={this.state.rightCol} \n        bottomRow={this.state.bottomRow}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}